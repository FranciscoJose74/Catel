//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Reflection
{
	using System;

	public partial class FastMemberInvoker<TEntity>
	{
		public bool SetFieldValue(TEntity entity, string fieldName, Object value)
		{
			if (_objectFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Object> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Boolean value)
		{
			if (_booleanFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Boolean> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Char value)
		{
			if (_charFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Char> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, SByte value)
		{
			if (_sbyteFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, SByte> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Byte value)
		{
			if (_byteFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Byte> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Int16 value)
		{
			if (_int16FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Int16> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, UInt16 value)
		{
			if (_uint16FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, UInt16> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Int32 value)
		{
			if (_int32FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Int32> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, UInt32 value)
		{
			if (_uint32FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, UInt32> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Int64 value)
		{
			if (_int64FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Int64> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, UInt64 value)
		{
			if (_uint64FieldSettersCache.TryGetValue(fieldName, out Action<TEntity, UInt64> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Single value)
		{
			if (_singleFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Single> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Double value)
		{
			if (_doubleFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Double> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, Decimal value)
		{
			if (_decimalFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, Decimal> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, DateTime value)
		{
			if (_datetimeFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, DateTime> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

		public bool SetFieldValue(TEntity entity, string fieldName, String value)
		{
			if (_stringFieldSettersCache.TryGetValue(fieldName, out Action<TEntity, String> setter))
			{
				setter(entity, value);

				return true;
			}

			return false;
		}

	}
}