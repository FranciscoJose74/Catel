<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var typeCodes = Enum.GetValues(typeof(TypeCode));
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Reflection
{
	using System;
	using System.Collections.Generic;
    using Catel.Linq.Expressions;

	public partial class FastMemberInvoker<TEntity>
	{
<# 
foreach (TypeCode typeCode in typeCodes) 
{
	if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull)
	{
		continue;
	}

	string typeCodeSetterCacheName = "_" + typeCode.ToString().ToLowerInvariant() + "PropertySettersCache";
	string typeCodeGetterCacheName = "_" + typeCode.ToString().ToLowerInvariant() + "PropertyGettersCache";
#>
		IReadOnlyDictionary<string, Func<TEntity,  <#= typeCode #>>> <#= typeCodeGetterCacheName #>;
		IReadOnlyDictionary<string, Action<TEntity, <#= typeCode #>>> <#= typeCodeSetterCacheName #>;

<# } #>
		public FastMemberInvoker()
		{
<#
foreach (TypeCode typeCode in typeCodes) 
{
	if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull)
	{
		continue;
	}

	string typeCodeSetterCacheName = "_" + typeCode.ToString().ToLowerInvariant() + "SettersCache";
	string typeCodeGetterCacheName = "_" + typeCode.ToString().ToLowerInvariant() + "GettersCache";

#>
			<#= typeCodeGetterCacheName #> = ExpressionBuilder.CreatePropertyGetters<TEntity, <#= typeCode #>>();
			<#= typeCodeSetterCacheName #> = ExpressionBuilder.CreatePropertySetters<TEntity, <#= typeCode #>>();

<# } #>
		}
	}
}