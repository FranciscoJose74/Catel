<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var logTargets = new [] { "Debug", "Status", "Info", "Warning", "Error" };
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Logging
{
	using System;
    using System.Collections.Concurrent;
	using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Catel.Linq.Expressions;

	public static partial class LogExtensions
	{
<# 
foreach (var logTarget in logTargets) 
{
        var paramsCount = 5;
        var logTargetForDocumentation = logTarget.ToLower();

#>
        /// <summary>
        /// Writes an empty line as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void <#= logTarget #>(this ILog log)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void <#= logTarget #>(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void <#= logTarget #>(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            Write(log, LogEvent.<#= logTarget #>, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void <#= logTarget #>WithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.<#= logTarget #>);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void <#= logTarget #>WithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.Is<#= logTarget #>Enabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.<#= logTarget #>);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void <#= logTarget #>WithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.<#= logTarget #>WithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as <#= logTargetForDocumentation #> and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void <#= logTarget #>AndStatus(this ILog log, string messageFormat, params object[] args)
        {
            <#= logTarget #>(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
<#
}
#>
    }
}