//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Logging
{
	using System;
    using System.Collections.Concurrent;
	using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Catel.Linq.Expressions;

	public static partial class LogExtensions
	{
        /// <summary>
        /// Writes an empty line as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void Debug(this ILog log)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void Debug(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void Debug(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void Debug(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void Debug(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void Debug(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void Debug(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as debug message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Debug(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            Write(log, LogEvent.Debug, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as debug message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void DebugWithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.Debug);
        }

        /// <summary>
        /// Writes the specified message as debug message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void DebugWithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.IsDebugEnabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.Debug);
        }

        /// <summary>
        /// Writes the specified message as debug message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void DebugWithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.DebugWithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as debug and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void DebugAndStatus(this ILog log, string messageFormat, params object[] args)
        {
            Debug(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
        /// <summary>
        /// Writes an empty line as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void Status(this ILog log)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void Status(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void Status(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void Status(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void Status(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void Status(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void Status(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Status(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            Write(log, LogEvent.Status, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as status message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void StatusWithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.Status);
        }

        /// <summary>
        /// Writes the specified message as status message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void StatusWithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.IsStatusEnabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.Status);
        }

        /// <summary>
        /// Writes the specified message as status message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void StatusWithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.StatusWithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as status and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void StatusAndStatus(this ILog log, string messageFormat, params object[] args)
        {
            Status(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
        /// <summary>
        /// Writes an empty line as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void Info(this ILog log)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void Info(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void Info(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void Info(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void Info(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void Info(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void Info(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as info message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Info(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            Write(log, LogEvent.Info, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as info message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void InfoWithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.Info);
        }

        /// <summary>
        /// Writes the specified message as info message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void InfoWithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.IsInfoEnabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.Info);
        }

        /// <summary>
        /// Writes the specified message as info message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void InfoWithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.InfoWithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as info and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void InfoAndStatus(this ILog log, string messageFormat, params object[] args)
        {
            Info(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
        /// <summary>
        /// Writes an empty line as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void Warning(this ILog log)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void Warning(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void Warning(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void Warning(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void Warning(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void Warning(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void Warning(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as warning message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Warning(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            Write(log, LogEvent.Warning, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as warning message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void WarningWithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.Warning);
        }

        /// <summary>
        /// Writes the specified message as warning message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void WarningWithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.IsWarningEnabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.Warning);
        }

        /// <summary>
        /// Writes the specified message as warning message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void WarningWithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.WarningWithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as warning and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void WarningAndStatus(this ILog log, string messageFormat, params object[] args)
        {
            Warning(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
        /// <summary>
        /// Writes an empty line as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        public static void Error(this ILog log)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting arguments.</param>
        public static void Error(this ILog log, string messageFormat, object s1)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, s1);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The .</param>
        /// <param name="s2"></param>
        public static void Error(this ILog log, string messageFormat, object s1, object s2)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, s1, s2);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        public static void Error(this ILog log, string messageFormat, object s1, object s2, object s3)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, s1, s2, s3);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        public static void Error(this ILog log, string messageFormat, object s1, object s2, object s3, object s4)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, s1, s2, s3, s4);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="s1">The formatting argument 1.</param>
        /// <param name="s2">The formatting argument 2.</param>
        /// <param name="s3">The formatting argument 3.</param>
        /// <param name="s4">The formatting argument 4.</param>
        /// <param name="s5">The formatting argument 5.</param>
        /// <param name="others">The formatting arguments.</param>
        public static void Error(this ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, params object[] others)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, s1, s2, s3, s4, s5, others);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void Error(this ILog log, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, messageFormat, args);
        }        

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, string.Empty);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, object arg1)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, arg1);
        }
        
        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, object arg1, object arg2)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, arg1, arg2);
        }
                
        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, arg1, arg2, arg3);
        }
                        
        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, arg1, arg2, arg3, arg4);
        }
                                
        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="arg1">A formatting argument.</param>
        /// <param name="arg2">A formatting argument.</param>
        /// <param name="arg3">A formatting argument.</param>
        /// <param name="arg4">A formatting argument.</param>
        /// <param name="arg5">A formatting argument.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Writes the specified message as error message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        public static void Error(this ILog log, Exception exception, string messageFormat, params object[] args)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            Write(log, LogEvent.Error, exception, messageFormat, args);
        }

        /// <summary>
        /// Writes the specified message as error message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        public static void ErrorWithData(this ILog log, string message, object extraData = null)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            log.WriteWithData(message, extraData, LogEvent.Error);
        }

        /// <summary>
        /// Writes the specified message as error message with log data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="message">The message.</param>
        /// <param name="logData">The log data.</param>
        public static void ErrorWithData(this ILog log, string message, LogData logData)
        {
            if (!LogManager.LogInfo.IsErrorEnabled)
            {
                return;
            }

            log.WriteWithData(message, logData, LogEvent.Error);
        }

        /// <summary>
        /// Writes the specified message as error message with extra data.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="exception">The exception.</param>
        /// <param name="message">The message.</param>
        /// <param name="extraData">The extra data.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="exception" /> is <c>null</c>.</exception>
        public static void ErrorWithData(this ILog log, Exception exception, string message, object extraData = null)
        {
            log.ErrorWithData(FormatException(exception, message), extraData);
        }

        /// <summary>
        /// Writes the specified message as error and status message.
        /// </summary>
        /// <param name="log">The log.</param>
        /// <param name="messageFormat">The message format.</param>
        /// <param name="args">The formatting arguments.</param>
        public static void ErrorAndStatus(this ILog log, string messageFormat, params object[] args)
        {
            Error(log, messageFormat, args);
            Status(log, messageFormat, args);
        }
    }
}